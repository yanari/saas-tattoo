generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Prisma Adapter
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  bookings Booking[] @relation("UserBooking")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// My Schemas
model TattooStudio {
  id       String                @id @default(cuid())
  name     String
  location String?
  services TattooStudioService[]
  artists  Artist[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TattooStudioService {
  id             String       @id @default(cuid())
  tattooStudio   TattooStudio @relation(fields: [tattooStudioId], references: [id])
  tattooStudioId String
  name           String
  description    String?
  price          Float?
  durationMin    Int?
  imageUrl       String?
  availability   Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Artist {
  id             String        @id @default(cuid())
  name           String
  bio            String?
  styles         String[] // Ex: ["blackwork", "realismo"]
  imageUrl       String?
  portfolioUrls  String[] // Links de portf√≥lio
  tattooStudio   TattooStudio? @relation(fields: [tattooStudioId], references: [id])
  tattooStudioId String?
  flashTattoos   FlashTattoo[]
  quotesReceived Quote[]
  feedbacks      Feedback[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FlashTattoo {
  id        String  @id @default(cuid())
  artist    Artist  @relation(fields: [artistId], references: [id])
  artistId  String
  title     String
  imageUrl  String
  price     Float
  available Boolean @default(true)

  createdAt DateTime @default(now())
}

model Quote {
  id            String         @id @default(cuid())
  artist        Artist         @relation(fields: [artistId], references: [id])
  artistId      String
  clientEmail   String
  description   String
  bodyPlacement String
  referenceUrls String[]
  notes         String?
  status        QuoteStatus    @default(PENDING)
  response      QuoteResponse?
  booking       Booking?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum QuoteStatus {
  PENDING
  RESPONDED
  APPROVED
  REJECTED
  CANCELED
}

model QuoteResponse {
  id           String   @id @default(cuid())
  quote        Quote    @relation(fields: [quoteId], references: [id])
  quoteId      String   @unique
  price        Float
  proposedDate DateTime
  depositValue Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Booking {
  id               String  @id @default(cuid())
  quote            Quote   @relation(fields: [quoteId], references: [id])
  quoteId          String  @unique
  paymentConfirmed Boolean @default(false)
  user             User?   @relation("UserBooking", fields: [userId], references: [id])
  userId           String?

  confirmedAt DateTime
}

model Feedback {
  id       String  @id @default(cuid())
  artist   Artist  @relation(fields: [artistId], references: [id])
  artistId String
  rating   Int
  comment  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
