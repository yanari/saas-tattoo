generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Prisma Adapter
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  bookings Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// My Schemas
model TattooStudio {
  id       String   @id @default(uuid())
  name     String
  address  String
  phones   String[]
  bio      String
  imageUrl String

  slug      String   @unique
  email     String   @unique
  instagram String?
  city      String
  styles    String[] // lista de estilos (ex: ['fineline', 'blackwork'])

  services TattooStudioService[]

  // availability   Json // pode armazenar hor√°rios personalizados por dia
  // paymentMethods String[] // ex: ['pix', 'cartao', 'dinheiro']
  // signalRequired Boolean  @default(false)
  // signalAmount   Decimal? // usado se signalRequired for true
  // portfolio      Tattoo[] // relacionamento com tattoos feitas

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TattooStudioService {
  id          String  @id @default(uuid())
  name        String
  description String
  imageUrl    String
  price       Decimal @db.Decimal(10, 2)

  tattooStudioId String
  tattooStudio   TattooStudio @relation(fields: [tattooStudioId], references: [id])
  bookings       Booking[]
}

model Booking {
  id        String              @id @default(uuid())
  userId    String
  user      User                @relation(fields: [userId], references: [id])
  serviceId String
  service   TattooStudioService @relation(fields: [serviceId], references: [id])

  date DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
