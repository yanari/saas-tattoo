generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Prisma Adapter
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  bookings Booking[] @relation("UserBooking")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// My Schemas
model TattooStudio {
  id   String @id @default(cuid())
  name String

  bio       String?
  imageUrl  String? // Foto do estúdio
  address   String? // Endereço físico
  phones    String[] // Lista de telefones
  slug      String?  @unique // Para URL amigável
  email     String?  @unique // Contato direto
  instagram String? // @ do Instagram
  city      String? // Cidade onde o estúdio está
  styles    String[] // Estilos que o estúdio oferece (["fineline", "blackwork"] etc.)
  location  Json? // {lat: -23, lng: -46}

  services TattooStudioService[]
  artists  Artist[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TattooStudioService {
  id             String       @id @default(cuid())
  tattooStudio   TattooStudio @relation(fields: [tattooStudioId], references: [id])
  tattooStudioId String

  name        String
  description String?
  price       Float?
  durationMin Int?
  imageUrl    String?

  availability Json?

  bookings Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Artist {
  id     String   @id @default(cuid())
  name   String
  bio    String?
  styles String[] // Ex: ["blackwork", "realismo"]

  instagram String? // @ do Instagram
  city      String? // Cidade onde o estúdio está
  location  Json? // {lat: -23, lng: -46}

  address String? // Endereço físico
  slug    String? @unique // Para URL amigável
  email   String? @unique // Contato direto

  imageUrl      String?
  portfolioUrls String[] // Links de portfólio

  tattooStudio   TattooStudio? @relation(fields: [tattooStudioId], references: [id])
  tattooStudioId String?

  flashTattoos   FlashTattoo[]
  quotesReceived Quote[]
  feedbacks      Feedback[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FlashTattoo {
  id        String  @id @default(cuid())
  artist    Artist  @relation(fields: [artistId], references: [id])
  artistId  String
  title     String
  imageUrl  String
  price     Float
  available Boolean @default(true)

  createdAt DateTime @default(now())
}

model Quote {
  id          String @id @default(cuid())
  artist      Artist @relation(fields: [artistId], references: [id])
  artistId    String
  clientEmail String

  title         String?
  description   String
  bodyPlacement String
  referenceUrls String[]
  notes         String?
  status        QuoteStatus    @default(PENDING)
  response      QuoteResponse?
  booking       Booking?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum QuoteStatus {
  PENDING // Enviado pelo cliente, aguardando resposta do artista
  RESPONDED // O artista respondeu com proposta
  APPROVED // Cliente aceitou a proposta
  REJECTED // Cliente recusou
  CANCELED // Cliente ou artista cancelou antes de finalizar
}

model QuoteResponse {
  id      String @id @default(cuid())
  quote   Quote  @relation(fields: [quoteId], references: [id])
  quoteId String @unique

  price        Float // Valor total do orçamento
  depositValue Float // Valor do sinal necessário
  proposedDate DateTime // Data sugerida para o procedimento

  paymentInstructions String? // Chave Pix, dados bancários ou observação sobre como pagar
  expiresAt           DateTime? // Prazo para o cliente pagar o sinal
  notes               String? // Observações gerais do artista (ex: cuidados prévios, preferências)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum BookingStatus {
  PENDING // Agendado mas aguardando confirmação
  AWAITING_PAYMENT // Cliente aceitou, mas ainda não pagou o sinal
  CONFIRMED // Pagamento do sinal feito
  CANCELLED // Cancelado pelo cliente ou artista
  COMPLETED // Tatuagem concluída
}

model Booking {
  id String @id @default(cuid())

  user   User?   @relation("UserBooking", fields: [userId], references: [id])
  userId String?

  artistQuote   Quote?  @relation(fields: [artistQuoteId], references: [id])
  artistQuoteId String? @unique

  tattooStudioService   TattooStudioService? @relation(fields: [tattooStudioServiceId], references: [id])
  tattooStudioServiceId String?

  startTime DateTime
  endTime   DateTime

  status BookingStatus @default(PENDING)

  confirmedAt      DateTime?
  paymentConfirmed Boolean   @default(false)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Feedback {
  id       String  @id @default(cuid())
  artist   Artist  @relation(fields: [artistId], references: [id])
  artistId String
  rating   Int
  comment  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
